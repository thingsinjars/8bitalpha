[
  {
    "name": "8bit.js",
    "path": "js/8bit.js",
    "content": {
      "structured": {
        "description": "A dropzone element that allows users to upload files and displays uploaded images after a delay. It uses the jQuery library to handle events such as file uploads and image displaying. The code also includes functions to check if a URL exists and to track page views using Google Analytics.",
        "items": [
          {
            "id": "3a59a4b1-68f3-e5ac-0d40-3a550d44589b",
            "ancestors": [],
            "description": "Initializes a dropzone and toggles an about section.",
            "name": null,
            "location": {
              "start": 1,
              "insert": 2,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "b9a7bb95-4881-e786-b846-8ab6f782f323",
            "ancestors": [],
            "description": "Checks if a file exists at the specified URL. If not, it recursively calls itself with a delay until the file is available or a maximum attempt count is reached. Once the file is available, it appends the image to two HTML elements.",
            "params": [
              {
                "name": "fileName",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to identify the image file name."
              },
              {
                "name": "i",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "Used to limit recursive calls."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "delayThenShowImages('test.png', 5);\n",
              "description": "\nThis code will display the 'test.png' image after a certain time."
            },
            "name": "delayThenShowImages",
            "location": {
              "start": 37,
              "insert": 28,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 27,
                "end": 36
              }
            },
            "item_type": "function",
            "length": 8,
            "docLength": 9
          },
          {
            "id": "a1639b98-ea4d-10b2-a049-95cbe48186f6",
            "ancestors": [],
            "description": "Checks whether a specified URL exists by sending a HEAD request to it using XMLHttpRequest. It returns true if the status code is not 404 (indicating the resource exists), and false otherwise, indicating that the resource does not exist or cannot be accessed.",
            "params": [
              {
                "name": "url",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to specify the URL to check for existence."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "True if the specified URL exists and false otherwise, based on the HTTP status code received from the request."
            },
            "usage": {
              "language": "javascript",
              "code": "var result = UrlExists('https://www.example.com');\nif (result) {\n  alert('URL exists');\n} else {\n  alert('URL does not exist');\n}\n",
              "description": ""
            },
            "name": "UrlExists",
            "location": {
              "start": 55,
              "insert": 46,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 45,
                "end": 54
              }
            },
            "item_type": "function",
            "length": 6,
            "docLength": 9
          }
        ]
      }
    }
  },
  {
    "name": "jquery.client.js",
    "path": "js/jquery.client.js",
    "content": {
      "structured": {
        "description": "A BrowserDetect object that detects the browser and operating system of the user's device by parsing the navigator.userAgent string and other properties. It uses an array of objects with specific search strings, substrings, and version search patterns to identify the browser and OS. The detected information is then stored in the client object.",
        "items": [
          {
            "id": "aa6739fb-a430-c8b8-594b-55d3198a00da",
            "ancestors": [],
            "description": "Initializes browser, version and operating system (OS) information by searching for specific strings in userAgent or appVersion properties. If not found, it sets default values.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "var detector = new Detector();\ndetector.init();\n",
              "description": ""
            },
            "name": "init",
            "location": {
              "start": 4,
              "insert": 4,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          },
          {
            "id": "6b517ff9-7a26-5385-8942-3f4fc2b7d6fe",
            "ancestors": [],
            "description": "Iterates over an array of objects, extracting a string and property from each object. It searches for a substring within the string or checks if the property exists. If a match is found, it returns the identity value associated with the matching object.",
            "params": [
              {
                "name": "data",
                "default_value": null,
                "optional": false,
                "type_name": "(object[]) | undefined",
                "description": "An array-like object."
              }
            ],
            "returns": {
              "type_name": "string | object",
              "description": "`data[i].identity`, where `i` is an index of the array `data`. The actual returned value may be one of the elements in the `data` array or null if no match is found."
            },
            "usage": {
              "language": "javascript",
              "code": "var data = [{string: 'Hello World', prop: null, subString: 'World', identity: '1'},\n           {string: null, prop: 'prop', versionSearch: 'hello', identity: '2'}];\nvar result = searchString(data);\n",
              "description": ""
            },
            "name": "searchString",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 13,
            "docLength": null
          },
          {
            "id": "e80e9a36-35e1-299e-274a-637df03dca1d",
            "ancestors": [],
            "description": "Extracts a version number from a given string, starting with a predefined search string. If found, it parses the version number as a floating-point number and returns it; otherwise, it returns nothing (i.e., undefined).",
            "params": [
              {
                "name": "dataString",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Searched for specific version number."
              }
            ],
            "returns": {
              "type_name": "number",
              "description": "Parsed from a substring of the input string, starting after the position where the search string was found. If no match is found, an undefined value is returned."
            },
            "usage": {
              "language": "javascript",
              "code": "var dataString = \"Version 1.2.3\";\nvar result = searchVersion(dataString);\nif (result) {\n\t// do something with the version number\n}",
              "description": ""
            },
            "name": "searchVersion",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "jquery.dnd-file-upload.js",
    "path": "js/jquery.dnd-file-upload.js",
    "content": {
      "structured": {
        "description": "A jQuery plugin called Dropzone that enables file uploads via drag-and-drop functionality. It extends the default options with those provided and adds event listeners for dragenter, dragover, and drop events. The plugin supports multiple concurrent uploads, logs upload progress and speed, and provides callbacks for new files dropped, upload started, finished, and progress updated.",
        "items": [
          {
            "id": "830cdd48-c65e-6499-6847-965682594802",
            "ancestors": [],
            "description": "Cancels form submission.",
            "name": null,
            "location": {
              "start": 28,
              "insert": 29,
              "offset": "\t",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "36270cd6-9bd6-52ba-354e-71689976f18b",
            "ancestors": [],
            "description": "Stops propagation and prevents default action for a drag event, effectively preventing the browser's default behavior when an element is entered while dragging an item. This ensures that the dropped item can be handled by the application instead of being processed by the browser.",
            "params": [
              {
                "name": "event",
                "default_value": null,
                "optional": false,
                "type_name": "Event",
                "description": "Used to prevent default browser behavior."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "`false`."
            },
            "usage": {
              "language": "javascript",
              "code": "<div id=\"drop-zone\" ondragover=\"dragenter(event)\" ondrop=\"drop(event)\"></div>\n",
              "description": ""
            },
            "name": "dragenter",
            "location": {
              "start": 87,
              "insert": 73,
              "offset": "\t",
              "indent": 1,
              "comment": {
                "start": 72,
                "end": 86
              }
            },
            "item_type": "function",
            "length": 5,
            "docLength": 14
          },
          {
            "id": "921b28aa-db72-8e98-f64c-e030d0cc8ba3",
            "ancestors": [],
            "description": "Stops event propagation and prevents default browser behavior for a dragged-over element, allowing the application to handle the drag operation instead. It returns `false` to indicate that the event has been handled.",
            "params": [
              {
                "name": "event",
                "default_value": null,
                "optional": false,
                "type_name": "Event",
                "description": "Used to handle drag-and-drop events."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "`false`."
            },
            "usage": {
              "language": "javascript",
              "code": "<div id=\"drag\" ondrop=\"handleDrop(event)\" ondragover=\"dragover(event)\"></div>\n",
              "description": "\nThis code sets up a div element with event listeners for drop and drag-over events."
            },
            "name": "dragover",
            "location": {
              "start": 105,
              "insert": 93,
              "offset": "\t",
              "indent": 1,
              "comment": {
                "start": 92,
                "end": 104
              }
            },
            "item_type": "function",
            "length": 5,
            "docLength": 12
          },
          {
            "id": "a133bfb5-2fde-5ab8-de45-2d21ba237fd4",
            "ancestors": [],
            "description": "Handles drag-and-drop file uploads. When a file is dropped onto an element, it retrieves the dropped files, prevents the default browser behavior, and calls the `uploadFiles` function to handle the file upload process.",
            "params": [
              {
                "name": "event",
                "default_value": null,
                "optional": false,
                "type_name": "Event",
                "description": "Triggered by a drag-and-drop operation."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "Set to `false`."
            },
            "usage": {
              "language": "javascript",
              "code": "<div id=\"drop-area\" ondrop=\"drop(event)\">Drop files here</div>\n",
              "description": "\nThe div with id \"drop-area\" will trigger the drop function when a file is dropped onto it."
            },
            "name": "drop",
            "location": {
              "start": 122,
              "insert": 111,
              "offset": "\t",
              "indent": 1,
              "comment": {
                "start": 110,
                "end": 121
              }
            },
            "item_type": "function",
            "length": 9,
            "docLength": 11
          },
          {
            "id": "120f9e06-a95e-9a95-7c4b-90f4237774b3",
            "ancestors": [],
            "description": "Checks if the `printLogs` option is set to true. If it is, it logs a message using the `console.log` method if `console` object exists. The logged message is passed as an argument to this function.",
            "params": [
              {
                "name": "logMsg",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used for logging messages."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "log(\"Hello World\");\n",
              "description": "\n\nThe above code would print \"Hello World\" if opts.printLogs is set to true."
            },
            "name": "log",
            "location": {
              "start": 141,
              "insert": 132,
              "offset": "\t",
              "indent": 1,
              "comment": {
                "start": 131,
                "end": 140
              }
            },
            "item_type": "function",
            "length": 5,
            "docLength": 9
          },
          {
            "id": "38a0a05d-c59d-228a-6f4f-9ec21bdd4403",
            "ancestors": [],
            "description": "Uploads a list of files to a server using XMLHttpRequest. It creates an XMLHttpRequest object for each file, sets headers and listeners, and sends the file data. The function also updates a dropzone's UI state during the upload process.",
            "params": [
              {
                "name": "files",
                "default_value": null,
                "optional": false,
                "type_name": "File[]",
                "description": "Used to pass an array of files for upload."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "uploadFiles([\n    new File([\"Content of file1.txt\"], \"file1.txt\", {type: \"text/plain\"}),\n    new File([\"Content of file2.txt\"], \"file2.txt\", {type: \"text/plain\"})\n]);\n",
              "description": ""
            },
            "name": "uploadFiles",
            "location": {
              "start": 158,
              "insert": 147,
              "offset": "\t",
              "indent": 1,
              "comment": {
                "start": 146,
                "end": 157
              }
            },
            "item_type": "function",
            "length": 30,
            "docLength": 11
          },
          {
            "id": "c05141bc-3c1d-36a2-9248-bfb098af0bb5",
            "ancestors": [],
            "description": "Updates a timestamp difference for the current file upload and triggers an event to notify the completion of uploading, logging a message to indicate the finished loading process.",
            "params": [
              {
                "name": "event",
                "default_value": null,
                "optional": false,
                "type_name": "Event",
                "description": "Triggered by a file loading operation completion."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "var loadEvent = {\n    downloadStartTime: new Date().getTime(),\n    fileIndex: 1,\n    fileObj: \"example.txt\"\n};\n\nload.call(loadEvent);\n",
              "description": "\n\nThe code above demonstrates a basic invocation of the `load` function, passing in a custom object with properties `downloadStartTime`, `fileIndex`, and `fileObj`."
            },
            "name": "load",
            "location": {
              "start": 199,
              "insert": 189,
              "offset": "\t",
              "indent": 1,
              "comment": {
                "start": 188,
                "end": 198
              }
            },
            "item_type": "function",
            "length": 6,
            "docLength": 10
          },
          {
            "id": "daae4a55-3264-3d85-1043-8f9a00f105bf",
            "ancestors": [],
            "description": "Updates the progress of a file upload by calculating the percentage completed and triggering events for speed update when the upload rate refresh time is reached.",
            "params": [
              {
                "name": "event",
                "default_value": null,
                "optional": false,
                "type_name": "ProgressEvent",
                "description": "Used to track file upload progress."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "var event = {loaded: 100, total: 500}; // Simulating a file upload event\nprogress(event);\n",
              "description": ""
            },
            "name": "progress",
            "location": {
              "start": 217,
              "insert": 206,
              "offset": "\t",
              "indent": 1,
              "comment": {
                "start": 205,
                "end": 216
              }
            },
            "item_type": "function",
            "length": 24,
            "docLength": 11
          },
          {
            "id": "4835328e-1e19-8cab-f144-2c22b9450934",
            "ancestors": [],
            "description": "Handles an event triggered by a file input element. It prevents the default action, retrieves all selected files, and then uploads them using the `uploadFiles` function.",
            "params": [
              {
                "name": "event",
                "default_value": null,
                "optional": false,
                "type_name": "Event",
                "description": "Triggered by an HTML file input field change event."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "<input type=\"file\" multiple onchange=\"change(event)\">\n",
              "description": "\nThis code will trigger the change() function whenever a file is selected."
            },
            "name": "change",
            "location": {
              "start": 255,
              "insert": 244,
              "offset": "\t",
              "indent": 1,
              "comment": {
                "start": 243,
                "end": 254
              }
            },
            "item_type": "function",
            "length": 9,
            "docLength": 11
          }
        ]
      }
    }
  }
]